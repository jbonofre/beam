<?xml version="1.0"?>
<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor 
	license agreements. See the NOTICE file distributed with this work for additional 
	information regarding copyright ownership. The ASF licenses this file to 
	You under the Apache License, Version 2.0 (the "License"); you may not use 
	this file except in compliance with the License. You may obtain a copy of 
	the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. -->
<project
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
	xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.apache.beam</groupId>
		<artifactId>beam-sdks-java-extensions-parent</artifactId>
		<version>2.1.0-SNAPSHOT</version>
		<relativePath>../pom.xml</relativePath>
	</parent>
	<artifactId>beam-sdks-java-extensions-dsl-xml</artifactId>
	<name>Apache Beam :: SDKs :: Java :: Extensions ::  DSLs :: XML</name>
	<description>Beam XML provides a new interface to generate a Beam pipeline using XML DSL</description>
	<properties>
		<kafka.clients.version>0.10.1.0</kafka.clients.version>
		<spark.version>1.6.2</spark.version>
	</properties>
	<profiles>

		<!-- The direct runner is available by default. You can also include it 
			on the classpath explicitly with -P direct-runner -->
		<profile>
			<id>direct-runner</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<dependencies>
				<dependency>
					<groupId>org.apache.beam</groupId>
					<artifactId>beam-runners-direct-java</artifactId>
					<scope>runtime</scope>
				</dependency>
			</dependencies>
		</profile>

		<!-- Include the Apache Apex runner with -P apex-runner -->
		<profile>
			<id>apex-runner</id>
			<dependencies>
				<dependency>
					<groupId>org.apache.beam</groupId>
					<artifactId>beam-runners-apex</artifactId>
					<scope>runtime</scope>
				</dependency>
				<!-- Apex depends on httpclient version 4.3.5, project has a transitive 
					dependency to httpclient 4.0.1 from google-http-client. Apex dependency version 
					being specified explicitly so that it gets picked up. This can be removed 
					when the project no longer has a dependency on a different httpclient version. -->
				<dependency>
					<groupId>org.apache.httpcomponents</groupId>
					<artifactId>httpclient</artifactId>
					<version>4.3.5</version>
					<scope>runtime</scope>
					<exclusions>
						<exclusion>
							<groupId>commons-codec</groupId>
							<artifactId>commons-codec</artifactId>
						</exclusion>
					</exclusions>
				</dependency>
			</dependencies>
		</profile>

		<!-- Include the Apache Flink runner with -P flink-runner -->
		<profile>
			<id>flink-runner</id>
			<dependencies>
				<dependency>
					<groupId>org.apache.beam</groupId>
					<artifactId>beam-runners-flink_2.10</artifactId>
					<scope>runtime</scope>
				</dependency>
			</dependencies>
		</profile>

		<!-- Include the Apache Spark runner -P spark-runner -->
		<profile>
			<id>spark-runner</id>
			<dependencies>
				<dependency>
					<groupId>org.apache.beam</groupId>
					<artifactId>beam-runners-spark</artifactId>
					<scope>runtime</scope>
				</dependency>
				<dependency>
					<groupId>org.apache.beam</groupId>
					<artifactId>beam-sdks-java-io-hadoop-file-system</artifactId>
					<scope>runtime</scope>
				</dependency>
				<dependency>
					<groupId>org.apache.spark</groupId>
					<artifactId>spark-streaming_2.10</artifactId>
					<version>${spark.version}</version>
					<scope>runtime</scope>
				</dependency>
				<dependency>
					<groupId>org.apache.spark</groupId>
					<artifactId>spark-core_2.10</artifactId>
					<version>${spark.version}</version>
					<scope>runtime</scope>
					<exclusions>
						<exclusion>
							<groupId>org.slf4j</groupId>
							<artifactId>jul-to-slf4j</artifactId>
						</exclusion>
					</exclusions>
				</dependency>
			</dependencies>
		</profile>

		<!-- Include the Google Cloud Dataflow runner -P dataflow-runner -->
		<profile>
			<id>dataflow-runner</id>
			<dependencies>
				<dependency>
					<groupId>org.apache.beam</groupId>
					<artifactId>beam-runners-google-cloud-dataflow-java</artifactId>
					<scope>runtime</scope>
				</dependency>
			</dependencies>
		</profile>

		<!-- Custom set up for our Jenkins precommit tests that comment on GitHub -->
		<profile>
			<id>jenkins-precommit</id>
			<properties>
				<skipITs>false</skipITs>
				<skipDefaultIT>true</skipDefaultIT>
			</properties>

			<dependencies>
				<!-- This profile requires -P apex-runner and -P spark-runner already. 
					When they are both included, the Spark runner's Kryo dependency will pull 
					in a version that is insufficiently recent for the Apex runner. This dependency 
					makes the Apex runner version "closer" by Maven resolution rules, so it will 
					not be overridden. -->
				<dependency>
					<groupId>com.esotericsoftware.kryo</groupId>
					<artifactId>kryo</artifactId>
					<version>${apex.kryo.version}</version>
					<scope>runtime</scope>
				</dependency>
			</dependencies>

			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<configuration>
							<useManifestOnlyJar>false</useManifestOnlyJar>
						</configuration>
						<executions>
							<execution>
								<id>direct-runner-integration-tests</id>
								<goals>
									<goal>integration-test</goal>
									<goal>verify</goal>
								</goals>
								<configuration>
									<includes>
										<include>WordCountIT.java</include>
										<include>WindowedWordCountIT.java</include>
									</includes>
									<parallel>all</parallel>
									<threadCount>4</threadCount>
									<systemPropertyVariables>
										<beamTestPipelineOptions>
											[
											"--project=apache-beam-testing",
											"--tempLocation=gs://temp-storage-for-end-to-end-tests",
											"--tempRoot=gs://temp-storage-for-end-to-end-tests",
											"--runner=org.apache.beam.runners.direct.DirectRunner"
											]
										</beamTestPipelineOptions>
									</systemPropertyVariables>
								</configuration>
							</execution>
							<execution>
								<id>flink-runner-integration-tests</id>
								<goals>
									<goal>integration-test</goal>
									<goal>verify</goal>
								</goals>
								<configuration>
									<includes>
										<include>WordCountIT.java</include>
										<include>WindowedWordCountIT.java</include>
									</includes>
									<parallel>all</parallel>
									<threadCount>4</threadCount>
									<systemPropertyVariables>
										<beamTestPipelineOptions>
											[
											"--project=apache-beam-testing",
											"--tempRoot=gs://temp-storage-for-end-to-end-tests",
											"--runner=org.apache.beam.runners.flink.TestFlinkRunner"
											]
										</beamTestPipelineOptions>
									</systemPropertyVariables>
								</configuration>
							</execution>
							<execution>
								<id>spark-runner-integration-tests</id>
								<goals>
									<goal>integration-test</goal>
									<goal>verify</goal>
								</goals>
								<configuration>
									<includes>
										<include>WordCountIT.java</include>
									</includes>
									<systemPropertyVariables>
										<beamTestPipelineOptions>
											[
											"--project=apache-beam-testing",
											"--tempRoot=gs://temp-storage-for-end-to-end-tests",
											"--runner=org.apache.beam.runners.spark.TestSparkRunner"
											]
										</beamTestPipelineOptions>
									</systemPropertyVariables>
								</configuration>
							</execution>
							<execution>
								<id>dataflow-runner-integration-tests</id>
								<goals>
									<goal>integration-test</goal>
									<goal>verify</goal>
								</goals>
								<configuration>
									<includes>
										<include>WordCountIT.java</include>
										<include>WindowedWordCountIT.java</include>
									</includes>
									<parallel>all</parallel>
									<threadCount>4</threadCount>
									<systemPropertyVariables>
										<beamTestPipelineOptions>
											[
											"--project=apache-beam-testing",
											"--tempRoot=gs://temp-storage-for-end-to-end-tests",
											"--runner=TestDataflowRunner"
											]
										</beamTestPipelineOptions>
									</systemPropertyVariables>
								</configuration>
							</execution>
							<execution>
								<id>dataflow-runner-integration-tests-streaming</id>
								<goals>
									<goal>integration-test</goal>
									<goal>verify</goal>
								</goals>
								<configuration>
									<includes>
										<include>WordCountIT.java</include>
										<include>WindowedWordCountIT.java</include>
									</includes>
									<parallel>all</parallel>
									<threadCount>4</threadCount>
									<systemPropertyVariables>
										<beamTestPipelineOptions>
											[
											"--project=apache-beam-testing",
											"--tempRoot=gs://temp-storage-for-end-to-end-tests",
											"--runner=TestDataflowRunner",
											"--streaming=true"
											]
										</beamTestPipelineOptions>
									</systemPropertyVariables>
								</configuration>
							</execution>
							<execution>
								<id>apex-runner-integration-tests</id>
								<goals>
									<goal>integration-test</goal>
									<goal>verify</goal>
								</goals>
								<configuration>
									<includes>
										<include>WordCountIT.java</include>
										<include>WindowedWordCountIT.java</include>
									</includes>
									<parallel>none</parallel>
									<threadCount>4</threadCount>
									<systemPropertyVariables>
										<beamTestPipelineOptions>
											[
											"--project=apache-beam-testing",
											"--tempRoot=gs://temp-storage-for-end-to-end-tests",
											"--runner=org.apache.beam.runners.apex.TestApexRunner"
											]
										</beamTestPipelineOptions>
									</systemPropertyVariables>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- This profile disables streaming integration tests which have the @Category(StreamingIT.class) 
			annotation. -->
		<profile>
			<id>disable-streaming-ITs</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<executions>
							<execution>
								<goals>
									<goal>integration-test</goal>
									<goal>verify</goal>
								</goals>
								<configuration>
									<excludedGroups>org.apache.beam.sdk.testing.StreamingIT</excludedGroups>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
	<dependencies>
		<dependency>
			<groupId>org.apache.beam</groupId>
			<artifactId>beam-sdks-java-core</artifactId>
		</dependency>


		<dependency>
			<groupId>org.apache.beam</groupId>
			<artifactId>beam-sdks-java-io-kafka</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.beam</groupId>
			<artifactId>beam-sdks-java-extensions-google-cloud-platform-core</artifactId>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>org.apache.beam</groupId>
			<artifactId>beam-sdks-java-io-google-cloud-platform</artifactId>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>com.google.api-client</groupId>
			<artifactId>google-api-client</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.beam</groupId>
			<artifactId>beam-runners-direct-java</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.kafka</groupId>
			<artifactId>kafka-clients</artifactId>
			<version>${kafka.clients.version}</version>
		</dependency>

		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
		</dependency>
		<dependency>
			<groupId>org.reflections</groupId>
			<artifactId>reflections</artifactId>
			<version>0.9.11</version>
		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>

		<dependency>
			<groupId>joda-time</groupId>
			<artifactId>joda-time</artifactId>
		</dependency>
		<dependency>
			<groupId>com.google.code.findbugs</groupId>
			<artifactId>jsr305</artifactId>
		</dependency>
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>

		<dependency>
			<groupId>com.google.auto.service</groupId>
			<artifactId>auto-service</artifactId>
			<optional>true</optional>
		</dependency>



		<!-- test -->

		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-all</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jvnet.jaxb2_commons</groupId>
			<artifactId>jaxb2-basics-runtime</artifactId>
			<version>0.6.5</version>
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<plugin>
				<groupId>org.jvnet.jaxb2.maven2</groupId>
				<artifactId>maven-jaxb2-plugin</artifactId>
				<version>0.12.3</version>
				<executions>
					<execution>
						<id>generate-model-xml-dsl</id>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<schemaDirectory>src/main/resources/</schemaDirectory>
							<schemaIncludes>
								<include>beamflow.xsd</include>
							</schemaIncludes>
							<bindingDirectory>src/main/resources/</bindingDirectory>
							<bindingIncludes>
								<include>global.xjb</include>
							</bindingIncludes>
							<generateDirectory>target/generated-sources/dsl-model</generateDirectory>
							<generatePackage>org.apache.beam.sdk.extensions.dsls.xml.flow.metadata.model</generatePackage>
							<!-- For including equals,hashcode and toString methods in generated 
								code -->
							<plugins>
								<plugin>
									<groupId>org.jvnet.jaxb2_commons</groupId>
									<artifactId>jaxb2-basics</artifactId>
									<version>0.9.4</version>
								</plugin>
							</plugins>
							<args>
								<arg>-Xequals</arg>
								<arg>-XhashCode</arg>
								<arg>-XtoString</arg>
							</args>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- For Adding Generated code directory as source folder -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>add-source</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>${basedir}/target/generated-sources/dsl-model/</source>
							</sources>


						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-gpg-plugin</artifactId>
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
